import os
import subprocess
from IPython.display import display, HTML
from base64 import b64encode

def play_video_universal(video_path: str):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–µ–∑–¥–µ:
    - VS Code (—Å–∫—Ä–∏–ø—Ç—ã)
    - VS Code (Jupyter) 
    - Google Colab
    - Jupyter Lab
    - –õ–æ–∫–∞–ª—å–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã
    """
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    if not os.path.exists(video_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {video_path}")
        return
    
    abs_path = os.path.abspath(video_path)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ä–µ–¥—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    try:
        from IPython import get_ipython
        in_notebook = get_ipython() is not None
    except:
        in_notebook = False
    
    # –í–ï–ë-–°–†–ï–î–´ (Colab, Jupyter Lab)
    if in_notebook:
        try:
            # –°–∂–∏–º–∞–µ–º –≤–∏–¥–µ–æ –¥–ª—è –≤–µ–±–∞
            compressed_path = video_path.replace(".mp4", "_web.mp4")
            result = subprocess.run([
                "ffmpeg", "-i", video_path, 
                "-vcodec", "libx264", 
                "-crf", "23", 
                "-preset", "fast", 
                "-movflags", "faststart",  # –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
                compressed_path,
                "-y"
            ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

            if result.returncode != 0:
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏ –≤–∏–¥–µ–æ")
                return

            # –ß–∏—Ç–∞–µ–º —Å–∂–∞—Ç–æ–µ –≤–∏–¥–µ–æ
            with open(compressed_path, "rb") as f:
                video_bytes = f.read()

            # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64
            video_base64 = b64encode(video_bytes).decode()

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ HTML
            display(HTML(f"""
            <video width="800" controls style="border-radius: 8px; margin: 10px 0;">
                <source src="data:video/mp4;base64,{video_base64}" type="video/mp4">
                –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ —Ç–µ–≥.
            </video>
            <p><small>–§–∞–π–ª: {os.path.basename(video_path)}</small></p>
            """))

            # –£–¥–∞–ª—è–µ–º —Å–∂–∞—Ç—ã–π —Ñ–∞–π–ª
            os.remove(compressed_path)
            print(f"‚úÖ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ –Ω–æ—É—Ç–±—É–∫")
            return
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤–∏–¥–µ–æ: {e}")
    
    # –õ–û–ö–ê–õ–¨–ù–´–ï –°–†–ï–î–´ (VS Code —Å–∫—Ä–∏–ø—Ç—ã, —Ç–µ—Ä–º–∏–Ω–∞–ª)
    else:
        try:
            if sys.platform == "win32":
                os.startfile(abs_path)
            elif sys.platform == "darwin":
                subprocess.run(["open", abs_path], check=True)
            else:
                subprocess.run(["xdg-open", abs_path], check=True)
            print(f"‚úÖ –í–∏–¥–µ–æ –æ—Ç–∫—Ä—ã—Ç–æ –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º –ø–ª–µ–µ—Ä–µ: {abs_path}")
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: {e}")
            print(f"üìÅ –û—Ç–∫—Ä–æ–π—Ç–µ –≤—Ä—É—á–Ω—É—é: {abs_path}")
