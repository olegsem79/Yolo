import ultralytics
import cv2  
from ultralytics import solutions

ultralytics.checks()

import torch
import ultralytics

print(f"PyTorch version: {torch.__version__}")
print(f"CUDA available: {torch.cuda.is_available()}")
print(f"CUDA version: {torch.version.cuda}")
print(f"Number of GPUs: {torch.cuda.device_count()}")

if torch.cuda.is_available():
    print(f"GPU device: {torch.cuda.get_device_name(0)}")
    print(f"GPU memory: {torch.cuda.get_device_properties(0).total_memory / 1024**3:.1f} GB")
else:
    print("‚ùå CUDA –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –¥—Ä–∞–π–≤–µ—Ä–æ–≤ –∏ PyTorch —Å GPU –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π")

import subprocess
import sys

def check_gpu():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è NVIDIA GPU –≤ —Å–∏—Å—Ç–µ–º–µ"""
    try:
        # –î–ª—è Windows
        result = subprocess.run(['nvidia-smi'], capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ NVIDIA GPU –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")
            print(result.stdout)
            return True
        else:
            print("‚ùå NVIDIA GPU –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∏–ª–∏ –¥—Ä–∞–π–≤–µ—Ä—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            return False
    except FileNotFoundError:
        print("‚ùå nvidia-smi –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥—Ä–∞–π–≤–µ—Ä—ã NVIDIA")
        return False

check_gpu()

cap = cv2.VideoCapture(0)  # –í–µ–±-–∫–∞–º–µ—Ä–∞
# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –î–û assert
cap.set(cv2.CAP_PROP_FRAME_WIDTH, 1280)   # –®–∏—Ä–∏–Ω–∞ 1920px
cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 720)  # –í—ã—Å–æ—Ç–∞ 1080px
cap.set(cv2.CAP_PROP_FPS, 30)             # FPS 30

assert cap.isOpened(), "Error reading video file"

# –ü–æ–ª—É—á–∞–µ–º –£–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–ï –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
w = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
h = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
fps = int(cap.get(cv2.CAP_PROP_FPS))

print(f"üìπ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {w}x{h}, FPS: {fps}")

# Video writer
video_writer = cv2.VideoWriter("counting.avi",
                               cv2.VideoWriter_fourcc(*"mp4v"),
                               fps, (w, h))

# Define region points
region_points = [(20, 400), (1080, 400), (1080, 360), (20, 360)]

# Init ObjectCounter
counter = solutions.ObjectCounter(
    show=True,
    region=region_points,
    model="yolo11n.pt",  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –º–æ–¥–µ–ª—å
)

print("üé• –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –Ω–∞—á–∞—Ç–∞. –ù–∞–∂–º–∏—Ç–µ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞, 'p' –¥–ª—è –ø–∞—É–∑—ã.")

# Process video
paused = False
while cap.isOpened():
    if not paused:
        success, im0 = cap.read()
        if not success:
            print("–í–∏–¥–µ–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∏–ª–∏ –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è.")
            break
        
        results = counter(im0)
        video_writer.write(results.plot_im)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à
    key = cv2.waitKey(1) & 0xFF
    if key == ord('q'):  # –í—ã—Ö–æ–¥
        print("üö™ –í—ã—Ö–æ–¥ –ø–æ –Ω–∞–∂–∞—Ç–∏—é 'q'")
        break
    elif key == ord('p'):  # –ü–∞—É–∑–∞/–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ
        paused = not paused
        print("‚è∏Ô∏è –ü–∞—É–∑–∞" if paused else "‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ")
    elif key == ord('s'):  # –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç
        cv2.imwrite(f"screenshot_{cv2.getTickCount()}.jpg", results.plot_im)
        print("üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω")

cap.release()
video_writer.release()
cv2.destroyAllWindows()
print("‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")